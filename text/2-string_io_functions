#include "shell.h"

/**
 * _isalpha - Checks if a character is alphabetic
 * @c: The character to be checked
 *
 * Return: 1 if c is a letter lowercase or uppercase; 0 otherwise
**/

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	putchar('\n');
}

/**
 * flip_array - Reverses the elements of an array
 * @arr: Pointer to the array
 * @len: Length of the array
 *
 * This function reverses the order of elements in the provided array.
 * It takes a pointer to the array and its length, then swaps the elements
 * to achieve the reversal. The resulting array will have the first and
 * last elements swapped, the second and second-to-last elements swapped,
 * and so on.
**/

void flip_array(char *arr, int len)
{
	int i;
	char tmp;

	for (i = 0; i < (len / 2); i++)
	{
		tmp = arr[i];
		arr[i] = arr[(len - 1) - i];
		arr[(len - 1) - i] = tmp;
	}
}

/**
 * int_count - Counts the number of digits in an integer
 * @num: The integer to be counted
 *
 * This function takes an integer as input and counts the number of digits
 * it contains. It achieves this by repeatedly dividing the number by 10
 * and incrementing a counter until the number becomes zero.
 *
 * Return: The number of digits in the integer.
**/

int int_count(int num)
{
	int len;

	len = 0;

	while (num != 0)
	{
		len++;
		num = num / 10;
	}

	return (len);
}

/**
 * uint_char - convert an unsigned integer to character
 * @n: integer to convert
 * Return: character pointer
**/

char *uint_char(unsigned int n)
{
	int len = 0, i = 0;
	char *s;

	len = int_count(n);
	s = malloc(len + 2);

	if (!s)
	{
		free(s);
		return (NULL);
	}
	*s = '\0';

	while (n / 10)
	{
		s[i] = (n % 10) + '0';
		n /= 10;
		i++;
	}

	s[i] = (n % 10) + '0';
	flip_array(s, len);
	s[i + 1] = '\0';

	return (s);
}

/**
* _strcmp - compare string values
* @s1: input value
* @s2: input value
*
* Return: s1[i] - s2[i], and 0 for uccessful execution
**/

int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
			i++;
	}
	return (0);
}
